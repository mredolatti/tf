// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package is2fs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileRefSyncClient is the client API for FileRefSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileRefSyncClient interface {
	SyncUser(ctx context.Context, in *SyncUserRequest, opts ...grpc.CallOption) (*Updates, error)
}

type fileRefSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewFileRefSyncClient(cc grpc.ClientConnInterface) FileRefSyncClient {
	return &fileRefSyncClient{cc}
}

func (c *fileRefSyncClient) SyncUser(ctx context.Context, in *SyncUserRequest, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/FileRefSync/SyncUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileRefSyncServer is the server API for FileRefSync service.
// All implementations must embed UnimplementedFileRefSyncServer
// for forward compatibility
type FileRefSyncServer interface {
	SyncUser(context.Context, *SyncUserRequest) (*Updates, error)
	mustEmbedUnimplementedFileRefSyncServer()
}

// UnimplementedFileRefSyncServer must be embedded to have forward compatible implementations.
type UnimplementedFileRefSyncServer struct {
}

func (UnimplementedFileRefSyncServer) SyncUser(context.Context, *SyncUserRequest) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncUser not implemented")
}
func (UnimplementedFileRefSyncServer) mustEmbedUnimplementedFileRefSyncServer() {}

// UnsafeFileRefSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileRefSyncServer will
// result in compilation errors.
type UnsafeFileRefSyncServer interface {
	mustEmbedUnimplementedFileRefSyncServer()
}

func RegisterFileRefSyncServer(s grpc.ServiceRegistrar, srv FileRefSyncServer) {
	s.RegisterService(&FileRefSync_ServiceDesc, srv)
}

func _FileRefSync_SyncUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRefSyncServer).SyncUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileRefSync/SyncUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRefSyncServer).SyncUser(ctx, req.(*SyncUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileRefSync_ServiceDesc is the grpc.ServiceDesc for FileRefSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileRefSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FileRefSync",
	HandlerType: (*FileRefSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncUser",
			Handler:    _FileRefSync_SyncUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "changes.proto",
}
